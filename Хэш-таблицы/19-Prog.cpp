#include <iostream>
#include <string>
#include <cmath>

using namespace std;

int collis = 0;

struct person
{
	string fullname = "Null";
	string pass = "Null";
	string phone = "Null";
};

struct hash_table
{
	person* arr;
	hash_table(int n)
	{
		arr = new person[n];
	}
	void add(person tmp, int size);
	void find(string phone, int n);
};

string mas_first_name[100] =
{
	"Харитон","Артемий","Елисей", "Егор", "Александр", "Дмитрий", "Макар","Марк","Митофан","Остап","Потап", "Михаил", "Матвей", "Роман", "Иван", "Ильяс", "Арсенний",
	"Денис", "Евгений", "Даниил", "Тимофей", "Владислав", "Павел", "Марк", "Константин", "Тимур", "Олег", "Ярослав", "Антон", "Николай", "Глеб", "Данил", "Савелий",
	"Вадим", "Степан", "Юрий", "Богдан", "Артур", "Семен", "Макар", "Лев", "Виктор", "Елисей", "Виталий", "Вячеслав", "Захар", "Мирон", "Дамир", "Георгий", "Давид", "Платон",
	"Анатолий", "Григорий", "Демид", "Данила", "Станислав", "Василий", "Федор", "Родион" , "Леонид", "Одиссей", "Валерий", "Святослав", "Борис", "Эдуард", "Марат", "Герман",
	"Даниэль", "Петр", "Амир", "Всеволод", "Мирослав", "Гордей", "Артемий", "Эмиль", "Назар", "Савва", "Ян", "Рустам", "Ингат", "Влад", "Альберт", "Тамерлан", "Айдар", "Роберт",
	"Марсель", "Ильдар", "Самир", "Тихон" , "Рамиль", "Ринат", "Радмир", "Филипп", "Арсен", "Ростислав", "Святогор", "Яромир", "Алдуин", "Пастернак"
};

string mas_otch[121] =
{
	"Александрович", "Алексеевич", "Борисович", "Богданович", "Владимирович", "Владиславович", "Григорьевич",
	"Георгиевич", "Дмитриевич", "Денисович", "Дамирович", "Егорович", "Евгеньевич", "Игоревич", "Константинович",
	"Лаврентьевич", "Михайлович", "Николаевич","Ланнистер", "Баратеон", "Талли", "Аррены", "Грейджой", "Бронн", "Мартелл", "Атрейдес",
	"Харконнен", "Гильдеец", "Смирнов", "Иванов", "Кузнецов", "Соколов", "Попов", "Лебедев", "Козлов", "Новиков", "Морозов", "Петров",
	"Волков", "Соловьев", "Васильев", "Зайцев", "Павлов", "Семенов", "Голубев", "Виноградов", "Богданов", "Влолбев", "Федоров", "Михайлов",
	"Беляев", "Тарасов", "Белов", "Комаров", "Тарасов", "Белов", "Комаров", "Орлов", "Киселев", "Андреев", "Макаров", "Гладиатор", "Ильин",
	"Лазарев", "Медведев", "Ершов", "Никитин", "Соболев", "Рябов", "Поляков", "Цветков", "Данилов", "Жуков", "Фролов", "Журавльев", "Драконорожденный",
	"Егоров", "Петухов" , "Тимофеев", "Власов", "Калорв", "Лапин", "Сазонов", "Гордеев", "Уваров", "Брагин", "Якушев", "Зыков", "Шарапов", "Рожков",
	"Самоснов", "Лихачев", "Щукин", "Шаров", "Сафонов", "Птеродактель", "Устинов", "Исаев", "Капустин", "Кириллов", "Рогов", "Князев", "Кулагин", "Логинов",
	"Савин", "Туров", "Блинов", "Королев" , "Пестов", "Меркушев", "Гущин", "Буров", "Галкин", "Коновалов", "Громов", "Мельников", "Давыдов", "Русаков"
};
string mas_fam[125] =
{
	"Сучков","Степнов","Ермишин","Талалихин","Челомеев","Спирьянов","Тюлепов","Савельев","Лимонов","Козин","Тимашёв","Кудрявцев",
	"Голов","Скосырский","Деникин","Носатенко","Есаулов","Радыгин","Белевич","Рыченков","Егоров","Мананников","Балтабев",
	"Шерешевский","Корниенко","Витальев", "Иванов", "Сергеев", "Владимиров", "Алексеев", "Мизаров", "Степанов", "Каладиев",
	"Булатович", "Лексеевич", "Джиравоич", "Лопарович", "Хорашивич", "Шолораович", "Корупович", "Щокурепич", "Защеливич", "Степонвич",
	"Жиданович", "Жолкавович", "Долгичвич", "Зоглаоррвич", "Ларенвич", "Апотьлиавич", "Логравич", "Хологрвич", "Хорекунивич", "Экуравоич",
	"Федорович", "Болкивич", "Ждаровкич", "Шорокывич", "Героувич", "Носорович", "Гордунвич", "Цекрович", "Шитохович", "Дорекфич", "Жирович",
	"Эколович", "Кардинович", "Можетвич", "Твичевич", "Ютубович", "Тровович", "Дискордович", "Скапович", "Вкович", "Карандошович", "Стрелкович",
	"Усталович", "Щеголович", "Викингович", "Ероваич", "Евроводич", "Бытович", "Жетович", "Цукович", "Парович", "Мирович" , "Часович", "Владимриович",
	"Оакович", "Лапович", "Ушович", "Хокунович", "Шоуканович", "Скорпирович", "Вальгалович", "Асасинович", "Котович", "Лопухович", "Автомобиволич", "Ипотивович",
	"Сахарович", "Можетович", "Хорошкович", "Началович", "Жароквоич", "Нулевич", "Можектович", "Ктокович", "Собакович", "Радорович", "Флешович", "Хартович", "Резонович",
	"Сезонович", "Ансерович" , "Коверович", "Пикович", "Глазович", "Асович", "Легионвич", "Шадоувич", "Энович", "Пиполович", "Медневич", "Концович"
};
string mas_pass[100] =
{
	"79466889263","5466889253","5466889263","5464886263","5466589263","5467889263","5466889253","5436889263","5266889263","5456889263",
	"5462889563","5460889263","5466583263","5406889163","5482869263","5462889263","5466889200","0461889263","5487889263","5477889263",
	"5997889263","5466229263","5460882263","5411869263","5466111263","5466880013","5466879253","5466180263","7466889263","9466889263",
	"5412289263","9466889263","9966889263","2066889263","5466666663","5277889263","1126889263","5409489263","5652839990","5466877261",
	"5466096463","5411357263","7778889263","6716889263","0048189263","8962889263","4321889263","2499089263","5465789263","5052889263",
	"4320889263","5534189263","5469932163","9035489263","9935489263","5641234263","5355242442","6435244279","4567467659","6743856043",
	"6564889263","1114189263","5400000163","9222289263","8675482263","5347644263","5358769842","6439999279","4143427659","0039256043",
	"6568794223","1217657563","3487563598","8593984932","4536556565","2255551721","8584883292","5478384531","5435738574","9904022145",
	"6500044213","6457698342","3000563522","8590012432","4099911165","5431251721","8646454292","5440053021","4532138574","9005652195",
	"6594234213","1210032123","3864563238","8598543543","2531236753","2456321721","8557498512","9593484531","4857335253","9745372145",
};

string mas_phone[100] =
{
	"79243729263","79400311263","79654212263","79454352153","79426005343","79543735213","79488456345","79400021263","79488534503","79466043212",
	"79498756412","79460045321","79999422263","79466800232","79460021263","79934212063","79466808312","79002124263","79994532131","79986545763",
	"79299543223","79995664513","79654118854","79990231153","79429835412","79544535321","79499012535","79409435352","79946894623","79465443412",
	"79295463223","70004321253","79935483254","79990021243","79400231542","79784352322","79454764963","79478735353","79878783223","79499924122",
	"79296549603","76454621253","79939900003","79932412442","79031664222","79045372812","79965402121","79459053452","79999240216","79990342212",
	"79290000323","76504564333","79645646254","79064563272","79489436388","79893254342","79753452554","79495345283","79880353216","79000632172",
	"79295011123","76023456833","79006043284","79006458375","79489456388","79868074361","70012542554","75687975283","79456540096","79458974350",
	"79635648621","76456043243","75486048684","79006489460","79333300020","79459846020","79000002054","75985460400","79006546096","79450000993",
	"79000012481","76068432173","75459680684","79005043530","79435512650","79003213540","79987435934","75320000130","79503459356","79883530000",
	"79005765671","76456000323","75434000654","79043000120","79054001600","79435534000","79359999024","75045646410","79503459356","79000503218",
};



//Вводим ФИО
string fullname;

string randomize_fullname()
{
	return (mas_first_name[rand() % 100] + " " + mas_otch[rand() % 121] + " " + mas_fam[rand() % 125]);
}

//Вводим номер паспорта
string randomize_pass()
{
	return (mas_pass[rand() % 100]);
}

//Вводим телефон
string randomize_phone()
{
	return(mas_phone[rand() % 100]);
}

person create_person()
{
	person tmp;
	tmp.fullname = randomize_fullname();
	tmp.pass = randomize_pass();
	tmp.phone = randomize_phone();
	return tmp;
}

void show(const person tmp)
{
	cout << "          ФИО:   " << tmp.fullname << endl
		<< "Номер паспорта:   " << tmp.pass << endl
		<< "Номер телефона:   " << tmp.phone << endl << endl;
}
void person_in(person* arr, int count)
{
	for (int i = 0; i < count; i++)
	{
		arr[i] = create_person();
	}
}


void show(hash_table* table, int size)
{
	for (int i = 0; i < size; i++)
	{
		show(table->arr[i]);
	}
}

void print_pr(person* arr, int count)
{
	for (int i = 0; i < count; i++)
	{
		show(arr[i]);
	}
}

int calc_hash(string key, int size)
{
	double f;
	return int(size * modf(stoi(key) * 0.80335552, &f));
}

void hash_table::add(person tmp, int size)
{
	int index = calc_hash(tmp.phone, size);
	int hash = index;
	if (arr[index].fullname == "Null")
	{
		arr[index] = tmp;
		return;
	}
	else
	{
		while (index < size)
		{
			if (arr[index].fullname == "Null")
			{
				arr[index] = tmp;
				return;
			}
			index++;
			collis++;
		}
		if (index >= size)
		{
			index = 0;
			collis++;
			while (index < hash)
			{
				if (arr[index].fullname == "Null")
				{
					arr[index] = tmp;
					return;
				}
				index++;
				collis++;
			}
		}
	}
}

void hash_table::find(string num, int size)
{
	int hash = calc_hash(num, size);
	int index = hash;
	while (arr[index].phone != num && index < size)
	{
		index++;
	}
	if (index >= size)
	{
		index = 0;
		while (arr[index].phone != num && index < hash)
		{
			index++;
		}
		if (index >= hash)
		{
			cout << "Такого человека нет";
		}
		else
		{
			cout << "Такой человек есть по индексу: " << index << endl << endl;
		}
	}
}

int main()
{
	setlocale(LC_ALL, "RUS");
	int n;
	cout << "Введите количество элементов: ";
	cin >> n;
	cout << endl;
	person* arr = new person[n];
	hash_table table(n);
	person_in(arr, n);
	for (int i = 0; i < n; i++)
	{
		table.add(arr[i], n);
	}
	int comand = -1;
	while (comand != 0)
	{
		cout << "0-выход, 1-вывод таблицы, 2-поиск по ключу, 3-подсчёт коллизий таблицы" << endl;
		cout << "Введите желаемое действие: ";
		cin >> comand;

		switch (comand)
		{
		  case 1:
		  {
			  cout << "Вывод сгенерированной таблицы!" << endl;
			  show(&table, n);
			  break;
		  }
		  
		  case 2:
		  {
			  string item;
			  cout << "Задайте номер телефона для поиска: ";
			  cin >> item;
			  table.find(item, n);
			  break;
		  }
		  case 3:
		  {
			  cout << "Кол-во коллизий для " << n << " записей: " << collis << endl;
			  break;
		  }
		}

	}
	delete[] arr;
	return 0;
}